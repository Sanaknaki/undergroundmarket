{"version":3,"sources":["img/logo.png","components/TrackInfoItem.tsx","components/Me.tsx","components/PlaylistListItem.tsx","utils/APIController.ts","components/Search.tsx","components/Main.tsx","components/TrackInfo.tsx","components/NavigationBar.tsx","utils/Hash.tsx","App.tsx","utils/Credentials.js","reportWebVitals.ts","index.tsx"],"names":["TrackInfoItem","label","value","ListGroup","Item","style","paddingTop","paddingBottom","Row","Col","md","className","Me","playlist","playlistID","useEffect","numTracks","totalPopularity","numArtists","Set","item","track","popularity","has","artists","name","add","avgPopularity","Math","floor","setStats","undergroundStatus","size","toggleDoneFetching","renderStats","useState","stats","Boolean","doneFetching","marginLeft","fontSize","PlaylistListItem","to","id","Container","display","album","token","setUser","a","axios","headers","data","method","then","response","fn","display_name","split","searchForTrack","query","setValues","join","results","tracks","getCurrentUsersPlaylists","setUnderGroundPlaylist","setUndergroundPlaylistID","found","items","sort","b","setPopularDailyPlaylist","userID","description","Search","searching","toggleSearching","searchValues","e","target","test","Fragment","InputGroup","FormControl","onChange","onSearchUpdate","placeholder","aria-describedby","length","width","total","Object","keys","list","push","renderResults","Main","undergroundPlaylist","undergroundPlaylistID","popularDailyPlaylist","createUndergroundMarketPlaylist","insighting","toggleInsight","Jumbotron","backgroundColor","paddingLeft","marginRight","span","offset","onClick","cursor","map","idx","TrackInfo","updating","toggleUpdating","isInPlaylist","dateAdded","trackInPlaylistValues","toggleTrackInPlaylist","setToken","setTrack","_token","localStorage","getItem","window","location","pathname","listTrack","added_at","slice","marginBottom","backgroundImage","images","url","backgroundSize","backgroundRepeat","height","release_date","Button","disabled","uris","uri","NavigationBar","spotify","authEndpoint","forceRefresh","Navbar","sticky","bg","Brand","src","logo","alt","Nav","Link","href","client_id","redirect_uri","scopes","removeItem","hash","substring","reduce","initial","parts","decodeURIComponent","App","client_secret","user","loginOptions","loop","autoplay","animationData","loginAnimation","rendererSettings","preserveAspectRatio","manageOptions","manageAnimation","trackingOptions","trackingAnimation","access_token","setItem","getCurrentUser","getPopularDailyPlaylist","exact","path","options","isStopped","isPaused","fixed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e1edd65.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.5dc7a593.png\";","import React from \"react\";\n\nimport { ListGroup, Row, Col } from \"react-bootstrap\";\n\ninterface TrackInfoItemProps {\n    label: string,\n\n    value: any,\n}\n\nexport const TrackInfoItem : React.FC<TrackInfoItemProps> = ({label, value}) => {\n    return (\n        <ListGroup.Item style={{paddingTop: \"40px\", paddingBottom: \"40px\"}}>\n                <Row>\n                    <Col md={6} className=\"text-left\">\n                        <span className=\"thicc gray\">\n                            {label}\n                        </span>\n                    </Col>\n\n                    <Col md={6} className=\"text-right\">\n                        <span className=\"bold blue\">\n                            {value}\n                        </span>\n                    </Col>\n                </Row>\n        </ListGroup.Item>\n    );\n}","import React, { useState, useEffect } from \"react\";\n\nimport { TrackInfoItem } from \"./TrackInfoItem\";\n\nimport { ListGroup } from \"react-bootstrap\";\n\ninterface MeProps {\n    playlist: any[],\n    playlistID: string\n}\n\nexport const Me: React.FC<MeProps> = ({playlist, playlistID}) => {\n    \n    useEffect(() => {\n        if(playlistID !== \"-1\") {\n            renderStats();\n        }\n    }, [playlistID]);\n\n    const [stats, setStats] = useState({\n        undergroundStatus: \"\",\n        numTracks: 0,\n        avgPopularity: 0,\n        numArtists: 0,\n    });\n\n    const [doneFetching = false, toggleDoneFetching] = useState(Boolean);\n\n    function renderStats() {        \n        let numTracks = 0;\n        let totalPopularity = 0;\n        let numArtists = new Set();\n\n        for(let item of playlist) {\n            numTracks++;\n            totalPopularity += item.track.popularity;\n            if(!numArtists.has(item.track.artists[0].name)) {\n                numArtists.add(item.track.artists[0].name); \n            }\n        }\n\n        let avgPopularity = Math.floor(totalPopularity / numTracks)\n\n        setStats({\n            undergroundStatus: (avgPopularity > 80) ? \"BAD\" : (avgPopularity > 45) ? \"AVERAGE\" : \"GREAT\",\n            numTracks,\n            avgPopularity: avgPopularity,\n            numArtists: numArtists.size\n        });\n\n        toggleDoneFetching(true);\n    }\n\n    if(!doneFetching) {\n        return (\n            <header className=\"track-view lightgray thicc\">\n                <i className=\"fas fa-spinner fa-spin fa-7x\" /><span style={{marginLeft: \"30px\", fontSize: \"30px\"}}>Getting some info...</span>\n            </header>\n        );\n    } else { \n        return (\n            <ListGroup className=\"boxShadow\">\n                <TrackInfoItem label=\"Underground Status\" value={stats.undergroundStatus}/>\n                <TrackInfoItem label=\"Average Popularity\" value={stats.avgPopularity ? stats.avgPopularity : \"0\"}/>\n                <TrackInfoItem label=\"# Tracks\" value={stats.numTracks}/>\n                <TrackInfoItem label=\"# Artists\" value={stats.numArtists}/>\n            </ListGroup>\n        );\n        }\n}","import React from \"react\";\n\nimport { ListGroup, Row, Col, Container } from \"react-bootstrap\";\n\nimport { Link } from \"react-router-dom\";\n\ninterface PlaylistListItemProps {\n    track: any,\n}\n\nexport const PlaylistListItem: React.FC<PlaylistListItemProps> = ({track}) => {\n    return (\n        <Link to={\"/undergroundmarket/track/\" + track.id}>\n            <ListGroup.Item>\n                <Container>\n                    <Row className=\"black\">\n                        <Col className=\"text-left\" md={10}>\n                            <span className=\"thicc gray\" style={{fontSize: \"20px\", display: \"block\" }}>{track.name}</span>\n                            <span className=\"bold lightgray\" style={{fontSize: \"12px\", display: \"block\"}}>{track.album.artists[0].name}</span>\n                        </Col>\n                        <Col className=\"d-flex align-items-center justify-content-end\" md={2}>\n                            <span className=\"bold blue\" style={{fontSize: \"16px\"}}>{track.popularity}</span>\n                        </Col>\n                    </Row>\n                </Container>\n            </ListGroup.Item>\n        </Link>\n    );\n}","import axios from \"axios\";\n\n// Get the current user\nexport async function getCurrentUser(token: string, setUser: Function) {\n    await axios(\"https://api.spotify.com/v1/me\", {\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"Authorization\": \"Bearer \" + token\n        },\n        data: \"grant_type=client_credentials\",\n        method: \"GET\"\n    })\n    .then(response => {\n        setUser({fn: response.data.display_name.split(\" \")[0], id: response.data.id});\n    });\n};\n\n// Search for a track\nexport async function searchForTrack(token: string, query: string, setValues: Function) {\n    await axios(\"https://api.spotify.com/v1/search?q=\" + query.split(\"%20\").join() + \"&type=track\", {\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"Authorization\": \"Bearer \" + token\n        },\n        data: \"grant_type=client_credentials\",\n        method: \"GET\"\n    })\n    .then(response => {\n        return setValues({query: query, results: response.data.tracks});\n    });\n}\n\n// Get the Underground Market playlist\nexport async function getCurrentUsersPlaylists(token: string, setUnderGroundPlaylist: Function, setUndergroundPlaylistID: Function) {\n    await axios(\"https://api.spotify.com/v1/me/playlists\", {\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"Authorization\": \"Bearer \" + token\n        },\n        data: \"grant_type=client_credentials\",\n        method: \"GET\"\n    })\n    .then(response => {\n        let found = false;\n\n        for(let playlist of response.data.items) {\n            if(playlist.name === \"Underground Market\") {\n                found = true;\n                axios(\"https://api.spotify.com/v1/playlists/\" + playlist.id, {\n                    headers: {\n                        \"Content-Type\": \"application/x-www-form-urlencoded\",\n                        \"Authorization\": \"Bearer \" + token\n                    },\n                    data: \"grant_type=client_credentials\",\n                    method: \"GET\"\n                })\n                .then(response => {\n                    response.data.tracks.items.sort((a: any, b: any) => (a.track.popularity < b.track.popularity) ? 1 : -1);\n                    setUnderGroundPlaylist(response.data.tracks.items);\n                    setUndergroundPlaylistID(playlist.id);\n                });\n            }\n        }\n\n        if(!found) {\n            setUndergroundPlaylistID(\"-1\");\n        }\n    });\n};\n\n// Gets the Top 50 Global playlist\nexport async function getPopularDailyPlaylist(token: string, setPopularDailyPlaylist: Function) {\n    await axios(\"https://api.spotify.com/v1/playlists/37i9dQZEVXbMDoHDwVN2tF\", {\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"Authorization\": \"Bearer \" + token\n        },\n        data: \"grant_type=client_credentials\",\n        method: \"GET\"\n    })\n    .then(response => {\n        response.data.tracks.items.sort((a: any, b: any) => (a.track.popularity < b.track.popularity) ? 1 : -1);\n\n        setPopularDailyPlaylist(response.data.tracks.items);\n    });\n}\n\n// Create the Underground Market playlist\nexport async function createUndergroundMarketPlaylist(token: string, userID: string ,setUnderGroundPlaylist: Function, setUndergroundPlaylistID: Function) {\n    await axios(\"https://api.spotify.com/v1/users/\" + userID + \"/playlists\", {\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"Authorization\": \"Bearer \" + token\n        },\n        data: {\n            name: \"Underground Market\",\n            description: \"Investing in underground music!\"\n        },\n        method: \"POST\"\n    })\n    .then(() => {\n        getCurrentUsersPlaylists(token, setUnderGroundPlaylist, setUndergroundPlaylistID);\n    });\n}\n\n// This needs to be .. better.\nexport async function checkTokenValidity() {\n    let currentToken = localStorage.getItem(\"TOKEN\");\n\n    await axios(\"https://api.spotify.com/v1/me/player\", {\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"Authorization\": \"Bearer \" + currentToken\n        },\n        data: \"grant_type=client_credentials\",\n        method: \"GET\"\n    })\n    .catch((err) => {\n        console.log(err);\n        if(err.response.status === 401) {\n            localStorage.removeItem(\"TOKEN\");\n        }\n    })\n}","import React, { useState } from \"react\";\n\nimport { PlaylistListItem } from \"./PlaylistListItem\";\n\nimport { searchForTrack } from \"../utils/APIController\";\n\nimport { Col, Container, FormControl, InputGroup, ListGroup, Row } from \"react-bootstrap\";\n\ninterface SearchProps {\n    token: string,\n}\n\nexport const Search: React.FC<SearchProps> = ({token}) => {\n\n    const [searching = false, toggleSearching] = useState(Boolean);\n    const [searchValues, setValues] = useState({\n        query: \"\",\n        results: {} as any\n    });\n\n    async function onSearchUpdate(e: any) {\n        if (e.target.value && /\\S/.test(e.target.value)) {\n            toggleSearching(true);\n            await searchForTrack(token, e.target.value, setValues);\n        } else {\n            setValues({\n                query: \"\",\n                results: {}\n            });\n        }\n\n        toggleSearching(false);\n    }\n\n    function renderResults() {\n        if(Object.keys(searchValues.results).length === 0 && !/\\S/.test(searchValues.query)) {\n            return (\n                <ListGroup.Item>\n                    <Container>\n                        <Row className=\"black\">\n                            <Col className=\"text-left\" md={12}>\n                                <span className=\"medium lightgray\">🎵 &nbsp;&nbsp;&nbsp; Search for a track!</span>\n                            </Col>\n                        </Row>\n                    </Container>\n                </ListGroup.Item>\n            );\n        } else if(searchValues.results.items.length !== 0) {\n            let list = [];\n\n            for(let track in searchValues.results.items) {\n                list.push(\n                    <PlaylistListItem \n                        key={track}\n                        track={searchValues.results.items[track]}\n                    />\n                );\n            }\n\n            return list;\n        } else {\n            return (\n                <ListGroup.Item>\n                    <Container>\n                        <Row className=\"black\">\n                            <Col className=\"text-left\" md={12}>\n                                <span className=\"medium lightgray\">🤕 &nbsp;&nbsp;&nbsp; No results!</span>\n                            </Col>\n                        </Row>\n                    </Container>\n                </ListGroup.Item>\n            );\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <InputGroup className=\"mb-3\">\n                <FormControl onChange={(e) => onSearchUpdate(e)} placeholder={\"Hotline Bling...\"} aria-describedby=\"track-search\" />\n            </InputGroup>\n            {\n                (searching) ? \n                    <span className=\"lightgray\">\n                        <i className=\"fas fa-spinner fa-spin\" />\n                    </span>\n                :\n                    <React.Fragment>\n                    {(searchValues.results.items && searchValues.results.items.length !== 0) ? \n                        <div className=\"text-left\" style={{width: \"100%\"}}>\n                            <span className=\"gray\">Showing {searchValues.results.items.length} of <span className=\"bold blue\">{searchValues.results.total}</span></span> \n                        </div>\n                    : \n                        null\n                    }\n                    <ListGroup className=\"boxShadow\">\n                        {renderResults()}\n                    </ListGroup>\n                    </ React.Fragment>\n            }\n        </React.Fragment>\n    );\n}","import React, { useState } from \"react\";\n\nimport { Me } from \"./Me\";\nimport { PlaylistListItem } from \"./PlaylistListItem\";\nimport { Search } from \"./Search\";\n\nimport { Jumbotron, Col, Row, ListGroup, Container } from \"react-bootstrap\";\n\ninterface MainProps {\n    token: string,\n    undergroundPlaylist: any[],\n    undergroundPlaylistID: string,\n    popularDailyPlaylist: any[],\n    name: string,\n\n    createUndergroundMarketPlaylist: Function,\n}\n\nexport const Main: React.FC<MainProps> = ({token, name, undergroundPlaylist, undergroundPlaylistID, popularDailyPlaylist, createUndergroundMarketPlaylist}) => {\n    \n    const [searching = false, toggleSearching] = useState(Boolean);\n    const [insighting = false, toggleInsight] = useState(Boolean);\n\n    function renderPlaylist() {\n        let list = [];\n        if(undergroundPlaylist.length === 0) {\n            return (\n                <ListGroup.Item>\n                    <Col className=\"text-center\" md={12}>\n                        <span className=\"bold lightgray\" style={{fontSize: \"16px\", display: \"block\"}}>\n                            Add music to your playlist to view them in your playlist portfolio!\n                        </span>\n                    </Col>\n                </ListGroup.Item>\n            );\n        }\n\n        list = undergroundPlaylist.map((item, idx) => {\n            return (\n                <PlaylistListItem \n                    key={idx}\n                    track={item.track}\n                />\n            )\n        });\n\n        return list;\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Jumbotron className='text-left' style={{width: \"100%\", backgroundColor: \"transparent\", paddingLeft: \"0px\"}}>\n                    <Row style={{fontSize: `calc(10px + 2vmin)`, width: \"100%\", marginLeft: \"auto\", marginRight: \"auto\"}}>\n                        <Col md={1} />\n                        <Col className=\"text-left\" md={11}>\n                            <span className=\"bold\"><span className=\"gray\">Good morning,</span> <span className=\"blue\">{name}!</span></span>\n                        </Col>\n                    </Row>\n                </Jumbotron>\n\n                <Row style={{width: \"100%\", marginLeft: \"auto\", marginRight: \"auto\"}}>\n                    <Col className=\"text-left\" md={{span: 3, offset: 1}}>\n                    <Row>\n                        <Col className=\"text-left\" md={6}>\n                            <span onClick={() => toggleInsight(false)} className={(insighting ? \"medium\" : \"bold\") + \" \" + (insighting ? \"gray\" : \"blue\")} style={{fontSize: \"16px\", cursor: \"pointer\"}}>Your Playlist</span>\n                        </Col>\n                        <Col className=\"text-right\" md={6}>\n                            <span onClick={() => toggleInsight(true)} className={(insighting ? \"bold\" : \"medium\") + \" \" + (insighting ? \"blue\" : \"gray\")} style={{fontSize: \"16px\", cursor: \"pointer\"}}>Insights</span>\n                        </Col>\n                    </Row>    \n                    <ListGroup className=\"boxShadow\">\n                        {\n                            (insighting) ?\n                                <Me \n                                playlist={undergroundPlaylist}\n                                playlistID={undergroundPlaylistID}\n                                />\n                            :\n                            (undergroundPlaylist && undergroundPlaylistID !== \"-1\") ?\n                                renderPlaylist()\n                            :\n                                <ListGroup.Item onClick={() => createUndergroundMarketPlaylist(token)} style={{fontSize: \"16px\", display: \"block\", cursor: \"pointer\"}}>\n                                    <Container>\n                                        <Row>\n                                            <Col className=\"text-left\" md={12}>\n                                                <span className=\"medium gray\">👆🏽 &nbsp;&nbsp;&nbsp; Click here to create your <span className=\"bold blue\">\"Underground Market\"</span> playlist!</span>\n                                            </Col>\n                                        </Row>\n                                    </Container>\n                                </ListGroup.Item>\n                        }\n                    </ListGroup>\n                    </Col>\n\n                    <Col md={{span: 3, offset: 4}}>\n                        <Row>\n                        <Col className=\"text-left\" md={6}>\n                            <span onClick={() => toggleSearching(false)} className={(searching ? \"medium\" : \"bold\") + \" \" + (searching ? \"gray\" : \"blue\")} style={{fontSize: \"16px\", cursor: \"pointer\"}}>Popular Tracks Today</span>\n                        </Col>\n                        <Col className=\"text-right\" md={6}>\n                            <span onClick={() => toggleSearching(true)} className={(searching ? \"bold\" : \"medium\") + \" \" + (searching ? \"blue\" : \"gray\")} style={{fontSize: \"16px\", cursor: \"pointer\"}}>Search</span>\n                        </Col>\n                        </Row>\n                        {\n                            (searching) ?\n                                <Search token={token}/>\n                            :\n                            <ListGroup className=\"boxShadow\">\n                                {\n                                    popularDailyPlaylist.map((item, idx) => {\n                                        return <PlaylistListItem \n                                                    key={idx}\n                                                    track={item.track}\n                                                />;\n                                    })\n                                }\n                            </ListGroup>\n                        }\n                    </Col>\n                </Row>\n            </header>\n        </div>\n    );\n}","import React, {useState, useEffect} from \"react\";\nimport axios from \"axios\";\n\nimport { TrackInfoItem } from \"./TrackInfoItem\";\n\nimport { Row, Col, ListGroup, Button} from \"react-bootstrap\";\n\ninterface TrackInfoProps {\n    playlist: any[]\n    playlistID: string\n}\n\ntype Track = {\n    album: any,\n    artists: any[],\n    id: string,\n    name: string,\n    popularity: number,\n    uri: string,\n};\n\nexport const TrackInfo: React.FC<TrackInfoProps> = ({playlist, playlistID}) => {\n    \n    const [doneFetching = false, toggleDoneFetching] = useState(Boolean);\n    const [updating = false, toggleUpdating] = useState(Boolean);\n\n    const [trackInPlaylistValues, toggleTrackInPlaylist] = useState({\n        isInPlaylist: false,\n        dateAdded: \"\"\n    });\n\n    const [token, setToken] = useState(\"\");\n    const [track, setTrack] = useState<Track>();\n\n    useEffect(() => {\n        let _token = (localStorage.getItem(\"TOKEN\"));\n        if(_token) {\n            setToken(_token);\n            axios(\"https://api.spotify.com/v1/tracks/\" + window.location.pathname.split('/')[3], {\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                \"Authorization\": \"Bearer \" + _token\n            },\n            data: \"grant_type=client_credentials\",\n            method: \"GET\"\n            })\n            .then(response => {\n                for(let listTrack of playlist) {\n                    if(listTrack.track.id === response.data.id) {\n                        toggleTrackInPlaylist({\n                            isInPlaylist: true,\n                            dateAdded: listTrack.added_at.slice(0, 10)\n                        });\n                        break;\n                    }\n                }\n\n                toggleDoneFetching(true);\n                setTrack(response.data);\n            });\n        }\n    }, [playlist]);\n\n    function addRemoveTrack(found: Boolean) {\n        toggleUpdating(true);\n\n        axios(\"https://api.spotify.com/v1/playlists/\" + playlistID + \"/tracks\", {\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                \"Authorization\": \"Bearer \" + token\n            },\n            data: { uris: [track?.uri] },\n            method: (found) ? \"DELETE\" : \"POST\"\n        })\n        .then(() => {\n            toggleTrackInPlaylist({isInPlaylist: !trackInPlaylistValues.isInPlaylist, dateAdded: \"Just now\"});\n            toggleUpdating(false);\n        });\n    }\n\n    function renderActionButton() {\n        return (\n            <Button className={(trackInPlaylistValues.isInPlaylist) ? \"white remove-btn bold\" : \"gray add-btn bold\"} disabled={updating} onClick={() => addRemoveTrack(trackInPlaylistValues.isInPlaylist)}>\n                {\n                    (updating) ? \n                        <React.Fragment>\n                            <i className=\"fas fa-spinner fa-spin\" /> Making it so...\n                        </React.Fragment>\n                    :\n                        (trackInPlaylistValues.isInPlaylist) ? \n                            \"Remove From Playlist\" \n                        : \n                            \"Add To Playlist\"\n                }\n            </Button>\n        )\n    }\n  \n    if(!doneFetching) {\n        return (\n            <header className=\"track-view lightgray thicc\">\n                <i className=\"fas fa-spinner fa-spin fa-7x\" /><span style={{marginLeft: \"30px\", fontSize: \"30px\"}}>Getting some info...</span>\n            </header>\n        );\n    } else {\n        return (\n            <header className=\"track-view\">\n                <Row>\n                    <Col style={{marginBottom: \"50px\"}} className=\"d-flex justify-content-center\" md={12}>\n                        <div style={{backgroundImage: \"url(\" + track?.album.images[0].url + \")\", backgroundSize: \"cover\", backgroundRepeat: \"no-repeat\",height: \"350px\", width: \"350px\"}}></div>\n                    </Col>\n\n                    <Col style={{marginBottom: \"50px\"}} className=\"text-center\" md={12}>\n                        <span className=\"thicc green\" style={{fontSize: \"35px\", display: \"block\" }}>{track?.name}</span>\n                        <span className=\"medium gray\" style={{fontSize: \"18px\", display: \"block\" }}>{track?.artists[0].name}</span>\n                    </Col>\n                    <Col md={12} style={{marginBottom: \"50px\"}}>\n                        <Row>\n                            <Col md={{span: 6, offset: 3}}>\n                                <ListGroup className=\"boxShadow\">\n                                    <TrackInfoItem label=\"Popularity\" value={track?.popularity}/>\n                                    <TrackInfoItem label=\"Date Of Release\" value={track?.album.release_date}/>                 \n                                    {\n                                        (trackInPlaylistValues.isInPlaylist) ?\n                                            <TrackInfoItem label=\"Date Added To Playlist\" value={trackInPlaylistValues.dateAdded}/>\n                                        :\n                                            null\n                                    }\n                                </ListGroup>\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col md={12} className=\"text-center\">\n                        {renderActionButton()}\n                    </Col>\n                </Row>\n            </header>\n        );\n    }\n}","import React from \"react\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\n\nimport { Nav, Navbar } from \"react-bootstrap\";\n\nimport logo from \"../img/logo.png\";\n\ninterface NavigationBarProps {\n    token: String\n    authEndpoint: String\n    spotify: {client_id: String, redirect_uri: String, scopes: string[]}\n}\n\nexport const NavigationBar: React.FC<NavigationBarProps> = ({token, spotify, authEndpoint}) => {\n\n    return (\n        <Router forceRefresh>\n            <Navbar sticky={\"top\"} style={{paddingTop: \"25px\", paddingBottom: \"25px\"}} bg=\"transparent\">\n                <Navbar.Brand><Link to=\"/undergroundmarket/\"><img src={logo} className=\"App-logo\" alt=\"logo\" /></Link></Navbar.Brand>\n                        <Nav className=\"mr-auto\" />\n                        {\n                        (token === \"\") ? \n                            <Nav.Link className=\"bold blue\" href={`${authEndpoint}client_id=${spotify.client_id}&redirect_uri=${spotify.redirect_uri}&scope=${spotify.scopes.join(\"%20\")}&response_type=token&show_dialog=true`}>Login</Nav.Link> \n                            :\n                            <React.Fragment>\n                                <Nav.Link onClick={() => localStorage.removeItem(\"TOKEN\")} href=\"/undergroundmarket/\"><i className=\"fas fa-door-open gray\"></i></Nav.Link>\n                            </React.Fragment>\n                        }\n                </Navbar>\n        </Router>\n    );\n}","const hash = window.location.hash\n    .substring(1)\n    .split(\"&\")\n    .reduce((initial: any, item) => {\n        if(item) {\n            var parts = item.split(\"=\");\n            initial[parts[0]] = decodeURIComponent(parts[1]);\n        }\n\n        return initial;\n    }, {});\n\n// window.location.hash = \"\";\n\nexport default hash;","import React, { useState, useEffect } from \"react\";\nimport Lottie from \"react-lottie\";\n\nimport logo from \"./img/logo.png\";\nimport loginAnimation from \"./img/login.json\";\nimport manageAnimation from \"./img/manage.json\";\nimport trackingAnimation from \"./img/track.json\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Navbar, Row, Col} from \"react-bootstrap\";\n\nimport { Main } from \"./components/Main\";\nimport { TrackInfo } from \"./components/TrackInfo\";\n\nimport { NavigationBar } from \"./components/NavigationBar\";\n\nimport { getCurrentUser, getCurrentUsersPlaylists, getPopularDailyPlaylist, createUndergroundMarketPlaylist } from \"./utils/APIController\";\nimport { Credentials, authEndpoint } from \"./utils/Credentials\";\nimport hash from \"./utils/Hash\";\n\nimport './css/App.css';\n\nconst App: React.FC<{}> = () => {\n\n    const spotify = Credentials();\n\n    const [token, setToken] = useState(\"\");\n    const [user, setUser] = useState({fn: \"\", id: \"\"});\n    \n    const [undergroundPlaylist, setUnderGroundPlaylist] = useState([]);\n    const [undergroundPlaylistID, setUndergroundPlaylistID] = useState(\"\");\n\n    const [popularDailyPlaylist, setPopularDailyPlaylist] = useState([]);\n\n    const loginOptions = {\n        loop: true,\n        autoplay: true, \n        animationData: loginAnimation,\n        rendererSettings: {\n          preserveAspectRatio: 'xMidYMid slice'\n        }\n    };\n\n    const manageOptions = {\n        loop: true,\n        autoplay: true, \n        animationData: manageAnimation,\n        rendererSettings: {\n          preserveAspectRatio: 'xMidYMid slice'\n        }\n    };\n\n\n    const trackingOptions = {\n        loop: true,\n        autoplay: true, \n        animationData: trackingAnimation,\n        rendererSettings: {\n          preserveAspectRatio: 'xMidYMid slice'\n        }\n    };\n\n    useEffect(() => {\n        let _token = (localStorage.getItem(\"TOKEN\")) ? (localStorage.getItem(\"TOKEN\")) : hash.access_token;\n        if(_token) {\n            localStorage.setItem(\"TOKEN\", _token)\n            setToken(_token);\n            getCurrentUser(_token, setUser);\n            getCurrentUsersPlaylists(_token, setUnderGroundPlaylist, setUndergroundPlaylistID);\n            getPopularDailyPlaylist(_token, setPopularDailyPlaylist);\n        }\n\n        window.location.hash = \"\";\n    }, []);\n\n    return (\n        <Router>\n            <NavigationBar token={token} spotify={spotify} authEndpoint={authEndpoint} />\n\n            {\n                token || localStorage.getItem(\"TOKEN\") ? \n                    (\n                        <Switch>\n                            <Route exact path=\"/undergroundmarket/\">\n                                <Main \n                                    token={token}\n                                    name={user.fn} \n                                    undergroundPlaylist={undergroundPlaylist}  \n                                    undergroundPlaylistID={undergroundPlaylistID}\n                                    popularDailyPlaylist={popularDailyPlaylist}\n\n                                    createUndergroundMarketPlaylist={() => createUndergroundMarketPlaylist(token, user.id, setUnderGroundPlaylist, setUndergroundPlaylistID)}\n                                />\n                            </Route>\n\n                            <Route path={\"/undergroundmarket/track/:trackId\"}>\n                                <TrackInfo\n                                    playlist={undergroundPlaylist}\n                                    playlistID={undergroundPlaylistID}\n                                />\n                            </Route>\n                        </Switch>\n                    )\n                :\n                <div className=\"App\">\n                    <header className=\"track-view\">\n                        <Row>\n                            <Col md={12} style={{marginBottom: \"100px\"}}>\n                                <img src={logo} alt=\"logo\" height={\"80px\"}/>\n                            </Col>\n                            <Col md={4}>\n                                <h1 className=\"thicc blue\">Step 1</h1>\n                                <span className=\"medium gray\">\n                                    Log into your Spotify account.\n                                </span>\n\n                                <Lottie \n                                    options={loginOptions}\n                                    height={400}\n                                    width={400}\n                                    isStopped={false}\n                                    isPaused={false}\n                                />\n                            </Col>\n\n                            <Col md={4}>\n                                <h1 className=\"thicc blue\">Step 2</h1>\n                                <span className=\"medium gray\">\n                                    Add / Update your \"Underground Market\" playlist (Add when popularity is low, remove when high)!\n                                </span>\n\n                                <Lottie \n                                    options={manageOptions}\n                                    height={400}\n                                    width={400}\n                                    isStopped={false}\n                                    isPaused={false}\n                                />\n                            </Col>\n\n                            <Col md={4}>\n                                <h1 className=\"thicc blue\">Step 3</h1>\n                                <span className=\"medium gray\">\n                                    Track how \"underground\" your playlist is!\n                                </span>\n\n                                <Lottie \n                                    options={trackingOptions}\n                                    height={400}\n                                    width={400}\n                                    isStopped={false}\n                                    isPaused={false}\n                                />\n                            </Col>\n                        </Row>\n                    </header>\n                </div>\n            }\n\n        <Navbar fixed=\"bottom\" bg=\"transparent\">\n            <span className=\"thin black\" style={{fontSize: \"12px\"}}>Made with ❤️ by Ali Sanaknaki</span>\n        </Navbar>\n        </Router>\n    );\n}\n\nexport default App;\n","export const Credentials = () => {\n    const client_id = \"d7a4392f350d493090f11dea6a95f1ce\"; // Your client id\n    const client_secret = \"f55d28528eeb4e55a385f4dedb7b502b\"; // Your secret\n    const redirect_uri = \"https://sanaknaki.github.io/undergroundmarket/\"; // Your redirect uri\n    const scopes = [\n        \"user-read-email\",\n        \"user-read-currently-playing\",\n        \"user-read-playback-state\",\n        \"playlist-modify-public\"\n    ];\n\n    return {\n        client_id,\n        client_secret,\n        redirect_uri,\n        scopes\n    }\n}\n\nexport const authEndpoint = \"https://accounts.spotify.com/authorize?\";","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}